// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: product.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    code,
    total,
    reserved
) VALUES (
    $1, $2, $3
) RETURNING id, code, total, reserved, updated_at, created_at
`

type CreateProductParams struct {
	Code     string `json:"code"`
	Total    int32  `json:"total"`
	Reserved int32  `json:"reserved"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Code, arg.Total, arg.Reserved)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Total,
		&i.Reserved,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, code, total, reserved, updated_at, created_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Total,
		&i.Reserved,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET code = $1
WHERE id = $2
RETURNING id, code, total, reserved, updated_at, created_at
`

type UpdateProductParams struct {
	Code string    `json:"code"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct, arg.Code, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Total,
		&i.Reserved,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateStock = `-- name: UpdateStock :one
UPDATE products
SET
    total = COALESCE($1, total),
    reserved = COALESCE($2, reserved)
WHERE code = $3
RETURNING id, code, total, reserved, updated_at, created_at
`

type UpdateStockParams struct {
	Total    pgtype.Int4 `json:"total"`
	Reserved pgtype.Int4 `json:"reserved"`
	Code     string      `json:"code"`
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateStock, arg.Total, arg.Reserved, arg.Code)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Total,
		&i.Reserved,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
