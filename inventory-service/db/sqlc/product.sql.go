// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: product.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addStock = `-- name: AddStock :one
UPDATE products
SET
    total = total + $1,
    hold = hold + $2,
    updated_at = NOW()
WHERE code = $3
RETURNING id, code, total, hold, updated_at, created_at
`

type AddStockParams struct {
	Total int32  `json:"total"`
	Hold  int32  `json:"hold"`
	Code  string `json:"code"`
}

func (q *Queries) AddStock(ctx context.Context, arg AddStockParams) (Product, error) {
	row := q.db.QueryRow(ctx, addStock, arg.Total, arg.Hold, arg.Code)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Total,
		&i.Hold,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    code,
    total,
    hold
) VALUES (
    $1, $2, $3
) RETURNING id, code, total, hold, updated_at, created_at
`

type CreateProductParams struct {
	Code  string `json:"code"`
	Total int32  `json:"total"`
	Hold  int32  `json:"hold"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Code, arg.Total, arg.Hold)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Total,
		&i.Hold,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, code, total, hold, updated_at, created_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Total,
		&i.Hold,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    code = $1,
    updated_at = NOW()
WHERE id = $2
RETURNING id, code, total, hold, updated_at, created_at
`

type UpdateProductParams struct {
	Code string    `json:"code"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct, arg.Code, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Total,
		&i.Hold,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
