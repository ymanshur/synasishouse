// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockrepo

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	db "github.com/ymanshur/synasishouse/inventory/db/sqlc"
	"github.com/ymanshur/synasishouse/inventory/internal/repo"
)

// NewMockRepo creates a new instance of MockRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepo(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockRepo {
	mock := &MockRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepo is an autogenerated mock type for the Repo type
type MockRepo struct {
	mock.Mock
}

type MockRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepo) EXPECT() *MockRepo_Expecter {
	return &MockRepo_Expecter{mock: &_m.Mock}
}

// AddStock provides a mock function for the type MockRepo
func (_mock *MockRepo) AddStock(ctx context.Context, arg db.AddStockParams) (db.Product, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddStock")
	}

	var r0 db.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.AddStockParams) (db.Product, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.AddStockParams) db.Product); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Product)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.AddStockParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_AddStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStock'
type MockRepo_AddStock_Call struct {
	*mock.Call
}

// AddStock is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddStockParams
func (_e *MockRepo_Expecter) AddStock(ctx interface{}, arg interface{}) *MockRepo_AddStock_Call {
	return &MockRepo_AddStock_Call{Call: _e.mock.On("AddStock", ctx, arg)}
}

func (_c *MockRepo_AddStock_Call) Run(run func(ctx context.Context, arg db.AddStockParams)) *MockRepo_AddStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.AddStockParams
		if args[1] != nil {
			arg1 = args[1].(db.AddStockParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepo_AddStock_Call) Return(product db.Product, err error) *MockRepo_AddStock_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockRepo_AddStock_Call) RunAndReturn(run func(ctx context.Context, arg db.AddStockParams) (db.Product, error)) *MockRepo_AddStock_Call {
	_c.Call.Return(run)
	return _c
}

// CheckStock provides a mock function for the type MockRepo
func (_mock *MockRepo) CheckStock(ctx context.Context, arg repo.CreateStockParams) (bool, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CheckStock")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repo.CreateStockParams) (bool, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, repo.CreateStockParams) bool); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, repo.CreateStockParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_CheckStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckStock'
type MockRepo_CheckStock_Call struct {
	*mock.Call
}

// CheckStock is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo.CreateStockParams
func (_e *MockRepo_Expecter) CheckStock(ctx interface{}, arg interface{}) *MockRepo_CheckStock_Call {
	return &MockRepo_CheckStock_Call{Call: _e.mock.On("CheckStock", ctx, arg)}
}

func (_c *MockRepo_CheckStock_Call) Run(run func(ctx context.Context, arg repo.CreateStockParams)) *MockRepo_CheckStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 repo.CreateStockParams
		if args[1] != nil {
			arg1 = args[1].(repo.CreateStockParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepo_CheckStock_Call) Return(b bool, err error) *MockRepo_CheckStock_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepo_CheckStock_Call) RunAndReturn(run func(ctx context.Context, arg repo.CreateStockParams) (bool, error)) *MockRepo_CheckStock_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function for the type MockRepo
func (_mock *MockRepo) CreateProduct(ctx context.Context, arg db.CreateProductParams) (db.Product, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 db.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateProductParams) (db.Product, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateProductParams) db.Product); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Product)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateProductParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockRepo_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateProductParams
func (_e *MockRepo_Expecter) CreateProduct(ctx interface{}, arg interface{}) *MockRepo_CreateProduct_Call {
	return &MockRepo_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, arg)}
}

func (_c *MockRepo_CreateProduct_Call) Run(run func(ctx context.Context, arg db.CreateProductParams)) *MockRepo_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.CreateProductParams
		if args[1] != nil {
			arg1 = args[1].(db.CreateProductParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepo_CreateProduct_Call) Return(product db.Product, err error) *MockRepo_CreateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockRepo_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateProductParams) (db.Product, error)) *MockRepo_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function for the type MockRepo
func (_mock *MockRepo) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepo_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type MockRepo_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepo_Expecter) DeleteProduct(ctx interface{}, id interface{}) *MockRepo_DeleteProduct_Call {
	return &MockRepo_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", ctx, id)}
}

func (_c *MockRepo_DeleteProduct_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepo_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepo_DeleteProduct_Call) Return(err error) *MockRepo_DeleteProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepo_DeleteProduct_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepo_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProduct provides a mock function for the type MockRepo
func (_mock *MockRepo) GetProduct(ctx context.Context, id uuid.UUID) (db.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 db.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Product)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type MockRepo_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepo_Expecter) GetProduct(ctx interface{}, id interface{}) *MockRepo_GetProduct_Call {
	return &MockRepo_GetProduct_Call{Call: _e.mock.On("GetProduct", ctx, id)}
}

func (_c *MockRepo_GetProduct_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepo_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepo_GetProduct_Call) Return(product db.Product, err error) *MockRepo_GetProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockRepo_GetProduct_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (db.Product, error)) *MockRepo_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseStock provides a mock function for the type MockRepo
func (_mock *MockRepo) ReleaseStock(ctx context.Context, arg repo.CreateStockParams) (bool, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseStock")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repo.CreateStockParams) (bool, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, repo.CreateStockParams) bool); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, repo.CreateStockParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_ReleaseStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseStock'
type MockRepo_ReleaseStock_Call struct {
	*mock.Call
}

// ReleaseStock is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo.CreateStockParams
func (_e *MockRepo_Expecter) ReleaseStock(ctx interface{}, arg interface{}) *MockRepo_ReleaseStock_Call {
	return &MockRepo_ReleaseStock_Call{Call: _e.mock.On("ReleaseStock", ctx, arg)}
}

func (_c *MockRepo_ReleaseStock_Call) Run(run func(ctx context.Context, arg repo.CreateStockParams)) *MockRepo_ReleaseStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 repo.CreateStockParams
		if args[1] != nil {
			arg1 = args[1].(repo.CreateStockParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepo_ReleaseStock_Call) Return(b bool, err error) *MockRepo_ReleaseStock_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepo_ReleaseStock_Call) RunAndReturn(run func(ctx context.Context, arg repo.CreateStockParams) (bool, error)) *MockRepo_ReleaseStock_Call {
	_c.Call.Return(run)
	return _c
}

// ReserveStock provides a mock function for the type MockRepo
func (_mock *MockRepo) ReserveStock(ctx context.Context, arg repo.CreateStockParams) (bool, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ReserveStock")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repo.CreateStockParams) (bool, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, repo.CreateStockParams) bool); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, repo.CreateStockParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_ReserveStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReserveStock'
type MockRepo_ReserveStock_Call struct {
	*mock.Call
}

// ReserveStock is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo.CreateStockParams
func (_e *MockRepo_Expecter) ReserveStock(ctx interface{}, arg interface{}) *MockRepo_ReserveStock_Call {
	return &MockRepo_ReserveStock_Call{Call: _e.mock.On("ReserveStock", ctx, arg)}
}

func (_c *MockRepo_ReserveStock_Call) Run(run func(ctx context.Context, arg repo.CreateStockParams)) *MockRepo_ReserveStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 repo.CreateStockParams
		if args[1] != nil {
			arg1 = args[1].(repo.CreateStockParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepo_ReserveStock_Call) Return(b bool, err error) *MockRepo_ReserveStock_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepo_ReserveStock_Call) RunAndReturn(run func(ctx context.Context, arg repo.CreateStockParams) (bool, error)) *MockRepo_ReserveStock_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function for the type MockRepo
func (_mock *MockRepo) UpdateProduct(ctx context.Context, arg db.UpdateProductParams) (db.Product, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 db.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateProductParams) (db.Product, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateProductParams) db.Product); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Product)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateProductParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepo_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockRepo_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateProductParams
func (_e *MockRepo_Expecter) UpdateProduct(ctx interface{}, arg interface{}) *MockRepo_UpdateProduct_Call {
	return &MockRepo_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, arg)}
}

func (_c *MockRepo_UpdateProduct_Call) Run(run func(ctx context.Context, arg db.UpdateProductParams)) *MockRepo_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateProductParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateProductParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepo_UpdateProduct_Call) Return(product db.Product, err error) *MockRepo_UpdateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockRepo_UpdateProduct_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateProductParams) (db.Product, error)) *MockRepo_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}
