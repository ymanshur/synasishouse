// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: order_detail.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrderDetail = `-- name: CreateOrderDetail :one
INSERT INTO order_details (
    order_id,
    product_code,
    amount
) VALUES (
    $1, $2, $3
) RETURNING id, order_id, product_code, amount, updated_at, created_at
`

type CreateOrderDetailParams struct {
	OrderID     uuid.UUID `json:"order_id"`
	ProductCode string    `json:"product_code"`
	Amount      int32     `json:"amount"`
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRow(ctx, createOrderDetail, arg.OrderID, arg.ProductCode, arg.Amount)
	var i OrderDetail
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductCode,
		&i.Amount,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listOrderDetails = `-- name: ListOrderDetails :many
SELECT id, order_id, product_code, amount, updated_at, created_at FROM order_details
WHERE order_id = $1
`

func (q *Queries) ListOrderDetails(ctx context.Context, orderID uuid.UUID) ([]OrderDetail, error) {
	rows, err := q.db.Query(ctx, listOrderDetails, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderDetail{}
	for rows.Next() {
		var i OrderDetail
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductCode,
			&i.Amount,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
