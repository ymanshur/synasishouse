// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    order_no,
    user_id,
    status
) VALUES (
    $1, $2, $3
) RETURNING id, order_no, user_id, status, expired_at, updated_at, created_at
`

type CreateOrderParams struct {
	OrderNo string    `json:"order_no"`
	UserID  uuid.UUID `json:"user_id"`
	Status  string    `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.OrderNo, arg.UserID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.OrderNo,
		&i.UserID,
		&i.Status,
		&i.ExpiredAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createOrderDetail = `-- name: CreateOrderDetail :one
INSERT INTO order_details (
    order_id,
    product_code,
    amount
) VALUES (
    $1, $2, $3
) RETURNING id, order_id, product_code, amount, updated_at, created_at
`

type CreateOrderDetailParams struct {
	OrderID     uuid.UUID `json:"order_id"`
	ProductCode string    `json:"product_code"`
	Amount      int32     `json:"amount"`
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRow(ctx, createOrderDetail, arg.OrderID, arg.ProductCode, arg.Amount)
	var i OrderDetail
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductCode,
		&i.Amount,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET
    status = $1,
    updated_at = NOW()
WHERE id = $2
RETURNING id, order_no, user_id, status, expired_at, updated_at, created_at
`

type UpdateOrderStatusParams struct {
	Status string    `json:"status"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.Status, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.OrderNo,
		&i.UserID,
		&i.Status,
		&i.ExpiredAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
